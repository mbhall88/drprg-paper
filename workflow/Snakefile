from collections import defaultdict
from pathlib import Path
from itertools import product
from snakemake.utils import min_version
import pandas as pd

min_version("7.14.1")


# =====================================
# Workflow config items
configfile: "config/config.yaml"


WORKFLOW = Path("workflow").resolve()
RULES = WORKFLOW / "rules"
ENVS = WORKFLOW / "envs"
SCRIPTS = WORKFLOW / "scripts"
RESULTS = Path("results").resolve()
PLOTS = RESULTS / "plots"
TABLES = RESULTS / "tables"
CAPTIONS = WORKFLOW / "report"
RESOURCES = Path("resources").resolve()
LOGS = Path("logs/rules").resolve()
BENCH = RESULTS / "benchmark"
CONTAINERS = config["containers"]
GB = 1_024
PADDING: int = config["padding"]
KS: list[int] = config["pandora"]["ks"]
WS: list[int] = config["pandora"]["ws"]
WKS = [(w, k) for w, k in product(WS, KS) if w < k]
QC_DIR = Path(config["QC_dir"])
MIN_ILLUMINA_COV = config["min_cov"]
MIN_NANOPORE_COV = config["min_cov"]
TECHS = ["nanopore", "illumina"]
TOOLS = ["mykrobe", "drprg", "tbprofiler"]
W = config["W"]
K = config["K"]
# =====================================

inclusion_expr = f"illumina_covg >= {MIN_ILLUMINA_COV} and nanopore_covg >= {MIN_NANOPORE_COV} and lineage != 'mixed'"
h2h_df = pd.read_csv(config["h2h_samplesheet"]).query(inclusion_expr)

illumina_subsample_runs = set()
with open("config/illumina.sample") as fp:
    for line in fp:
        illumina_subsample_runs.add(line.strip())

illumina_df = pd.read_csv(
    config["illumina_samplesheet"], low_memory=False, index_col="run"
)
illumina_df["run"] = illumina_df.index
illumina_query = "run in @illumina_subsample_runs or delamanid.notna()"
illumina_df.query(illumina_query, inplace=True)
ont_df = pd.read_csv(config["nanopore_samplesheet"], index_col="run", low_memory=False)

# =====================================
target_files = set()
WK_WILDCARDS = defaultdict(list)
for w, k in WKS:
    for s in h2h_df["sample"]:
        for t in TECHS:
            WK_WILDCARDS["sample"].append(s)
            WK_WILDCARDS["tech"].append(t)
            WK_WILDCARDS["w"].append(w)
            WK_WILDCARDS["k"].append(k)

# target_files.add(PLOTS / "wk_sweep.png")

# for tech in TECHS:
    # target_files.add(PLOTS / f"sn_sp/{tech}.png")
    # for ext in ("png", "svg"):
        # target_files.add(PLOTS / f"benchmark/predict/memory.{tech}.{ext}")
        # target_files.add(PLOTS / f"benchmark/predict/runtime.{tech}.{ext}")
    # target_files.add(RESULTS / f"QC/{tech}.qc.csv")
# target_files.add(RESULTS / f"depth/mykrobe/{tech}.summary.csv")
# target_files.add(RESULTS / f"depth/tbprofiler/{tech}.summary.csv")
# target_files.add(RESULTS / f"depth/drprg/{tech}.summary.csv")
# target_files.add(RESULTS / f"depth/drprg/{tech}.summary.csv")
#     target_files.add(PLOTS / f"dst_availability/upset.{tech}.png")
target_files.add(RESULTS / "drprg/popn_prg/final.bcf")

# =====================================
rule all:
    input:
        target_files,


rule index_reference:
    input:
        ref=RESOURCES / "NC_000962.3.fa",
    output:
        index=RESOURCES / "NC_000962.3.fa.fai",
    log:
        LOGS / "index_reference.log",
    container:
        CONTAINERS["samtools"]
    shell:
        "samtools faidx {input.ref} 2> {log}"


# =====================================
include: RULES / "common.smk"
include: RULES / "panel.smk"
include: RULES / "wk_sweep.smk"
include: RULES / "download.smk"
include: RULES / "qc.smk"
include: RULES / "predict.smk"
include: RULES / "depth.smk"
include: RULES / "report.smk"
